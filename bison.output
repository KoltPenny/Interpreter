Terminals unused in grammar

   '%'


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | input line

    3 line: '\n'
    4     | exp_var_assign '\n'
    5     | error '\n'
    6     | QUIT ';' '\n'

    7 nom_var: VAR
    8        | VAR '[' exp_entera ']'

    9 exp_var_assign: ASSIGN
   10               | exp_var ';'
   11               | INT VAR ';'
   12               | INT VAR EQ exp_var ';'
   13               | INT VAR '[' exp_entera ']' ';'
   14               | FLT VAR ';'
   15               | FLT VAR EQ exp_var ';'
   16               | FLT VAR '[' exp_entera ']' ';'
   17               | STR VAR ';'
   18               | STR VAR EQ exp_var ';'
   19               | nom_var EQ exp_var ';'

   20 exp_var: EXPRESSION
   21        | nom_var
   22        | '(' exp_var ')'
   23        | exp_entera
   24        | exp_decimal
   25        | exp_cadena
   26        | exp_var '+' exp_var
   27        | exp_var '-' exp_var
   28        | exp_var '*' exp_var
   29        | exp_var '/' exp_var
   30        | POW '(' exp_var ',' exp_var ')'

   31 exp_entera: ENTERO
   32           | '-' exp_entera

   33 exp_decimal: DECIMAL
   34            | '-' exp_decimal

   35 exp_cadena: CADENA
   36           | IF '(' exp_var COMPARE exp_var ')'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 3 4 5 6
'%' (37)
'(' (40) 22 30 36
')' (41) 22 30 36
'*' (42) 28
'+' (43) 26
',' (44) 30
'-' (45) 27 32 34
'/' (47) 29
';' (59) 6 10 11 12 13 14 15 16 17 18 19
'[' (91) 8 13 16
']' (93) 8 13 16
error (256) 5
ENTERO (258) 31
DECIMAL (259) 33
CADENA (260) 35
VAR (261) 7 8 11 12 13 14 15 16 17 18
INT (262) 11 12 13
FLT (263) 14 15 16
STR (264) 17 18
EXPRESSION (265) 20
ASSIGN (266) 9
POW (267) 30
QUIT (268) 6
IF (269) 36
EQ (270) 12 15 18 19
COMPARE (271) 36


Nonterminals, with rules where they appear

$accept (29)
    on left: 0
input (30)
    on left: 1 2, on right: 0 2
line (31)
    on left: 3 4 5 6, on right: 2
nom_var (32)
    on left: 7 8, on right: 19 21
exp_var_assign (33)
    on left: 9 10 11 12 13 14 15 16 17 18 19, on right: 4
exp_var (34)
    on left: 20 21 22 23 24 25 26 27 28 29 30, on right: 10 12 15 18
    19 22 26 27 28 29 30 36
exp_entera (35)
    on left: 31 32, on right: 8 13 16 23 32
exp_decimal (36)
    on left: 33 34, on right: 24 34
exp_cadena (37)
    on left: 35 36, on right: 25


State 0

    0 $accept: . input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input . $end
    2 input: input . line

    $end        shift, and go to state 2
    error       shift, and go to state 3
    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    INT         shift, and go to state 8
    FLT         shift, and go to state 9
    STR         shift, and go to state 10
    EXPRESSION  shift, and go to state 11
    ASSIGN      shift, and go to state 12
    POW         shift, and go to state 13
    QUIT        shift, and go to state 14
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '\n'        shift, and go to state 17
    '('         shift, and go to state 18

    line            go to state 19
    nom_var         go to state 20
    exp_var_assign  go to state 21
    exp_var         go to state 22
    exp_entera      go to state 23
    exp_decimal     go to state 24
    exp_cadena      go to state 25


State 2

    0 $accept: input $end .

    $default  accept


State 3

    5 line: error . '\n'

    '\n'  shift, and go to state 26


State 4

   31 exp_entera: ENTERO .

    $default  reduce using rule 31 (exp_entera)


State 5

   33 exp_decimal: DECIMAL .

    $default  reduce using rule 33 (exp_decimal)


State 6

   35 exp_cadena: CADENA .

    $default  reduce using rule 35 (exp_cadena)


State 7

    7 nom_var: VAR .
    8        | VAR . '[' exp_entera ']'

    '['  shift, and go to state 27

    $default  reduce using rule 7 (nom_var)


State 8

   11 exp_var_assign: INT . VAR ';'
   12               | INT . VAR EQ exp_var ';'
   13               | INT . VAR '[' exp_entera ']' ';'

    VAR  shift, and go to state 28


State 9

   14 exp_var_assign: FLT . VAR ';'
   15               | FLT . VAR EQ exp_var ';'
   16               | FLT . VAR '[' exp_entera ']' ';'

    VAR  shift, and go to state 29


State 10

   17 exp_var_assign: STR . VAR ';'
   18               | STR . VAR EQ exp_var ';'

    VAR  shift, and go to state 30


State 11

   20 exp_var: EXPRESSION .

    $default  reduce using rule 20 (exp_var)


State 12

    9 exp_var_assign: ASSIGN .

    $default  reduce using rule 9 (exp_var_assign)


State 13

   30 exp_var: POW . '(' exp_var ',' exp_var ')'

    '('  shift, and go to state 31


State 14

    6 line: QUIT . ';' '\n'

    ';'  shift, and go to state 32


State 15

   36 exp_cadena: IF . '(' exp_var COMPARE exp_var ')'

    '('  shift, and go to state 33


State 16

   32 exp_entera: '-' . exp_entera
   34 exp_decimal: '-' . exp_decimal

    ENTERO   shift, and go to state 4
    DECIMAL  shift, and go to state 5
    '-'      shift, and go to state 16

    exp_entera   go to state 34
    exp_decimal  go to state 35


State 17

    3 line: '\n' .

    $default  reduce using rule 3 (line)


State 18

   22 exp_var: '(' . exp_var ')'

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 37
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 19

    2 input: input line .

    $default  reduce using rule 2 (input)


State 20

   19 exp_var_assign: nom_var . EQ exp_var ';'
   21 exp_var: nom_var .

    EQ  shift, and go to state 38

    $default  reduce using rule 21 (exp_var)


State 21

    4 line: exp_var_assign . '\n'

    '\n'  shift, and go to state 39


State 22

   10 exp_var_assign: exp_var . ';'
   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ';'  shift, and go to state 44


State 23

   23 exp_var: exp_entera .

    $default  reduce using rule 23 (exp_var)


State 24

   24 exp_var: exp_decimal .

    $default  reduce using rule 24 (exp_var)


State 25

   25 exp_var: exp_cadena .

    $default  reduce using rule 25 (exp_var)


State 26

    5 line: error '\n' .

    $default  reduce using rule 5 (line)


State 27

    8 nom_var: VAR '[' . exp_entera ']'

    ENTERO  shift, and go to state 4
    '-'     shift, and go to state 45

    exp_entera  go to state 46


State 28

   11 exp_var_assign: INT VAR . ';'
   12               | INT VAR . EQ exp_var ';'
   13               | INT VAR . '[' exp_entera ']' ';'

    EQ   shift, and go to state 47
    ';'  shift, and go to state 48
    '['  shift, and go to state 49


State 29

   14 exp_var_assign: FLT VAR . ';'
   15               | FLT VAR . EQ exp_var ';'
   16               | FLT VAR . '[' exp_entera ']' ';'

    EQ   shift, and go to state 50
    ';'  shift, and go to state 51
    '['  shift, and go to state 52


State 30

   17 exp_var_assign: STR VAR . ';'
   18               | STR VAR . EQ exp_var ';'

    EQ   shift, and go to state 53
    ';'  shift, and go to state 54


State 31

   30 exp_var: POW '(' . exp_var ',' exp_var ')'

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 55
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 32

    6 line: QUIT ';' . '\n'

    '\n'  shift, and go to state 56


State 33

   36 exp_cadena: IF '(' . exp_var COMPARE exp_var ')'

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 57
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 34

   32 exp_entera: '-' exp_entera .

    $default  reduce using rule 32 (exp_entera)


State 35

   34 exp_decimal: '-' exp_decimal .

    $default  reduce using rule 34 (exp_decimal)


State 36

   21 exp_var: nom_var .

    $default  reduce using rule 21 (exp_var)


State 37

   22 exp_var: '(' exp_var . ')'
   26        | exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ')'  shift, and go to state 58


State 38

   19 exp_var_assign: nom_var EQ . exp_var ';'

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 59
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 39

    4 line: exp_var_assign '\n' .

    $default  reduce using rule 4 (line)


State 40

   26 exp_var: exp_var '+' . exp_var

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 60
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 41

   27 exp_var: exp_var '-' . exp_var

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 61
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 42

   28 exp_var: exp_var '*' . exp_var

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 62
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 43

   29 exp_var: exp_var '/' . exp_var

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 63
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 44

   10 exp_var_assign: exp_var ';' .

    $default  reduce using rule 10 (exp_var_assign)


State 45

   32 exp_entera: '-' . exp_entera

    ENTERO  shift, and go to state 4
    '-'     shift, and go to state 45

    exp_entera  go to state 34


State 46

    8 nom_var: VAR '[' exp_entera . ']'

    ']'  shift, and go to state 64


State 47

   12 exp_var_assign: INT VAR EQ . exp_var ';'

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 65
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 48

   11 exp_var_assign: INT VAR ';' .

    $default  reduce using rule 11 (exp_var_assign)


State 49

   13 exp_var_assign: INT VAR '[' . exp_entera ']' ';'

    ENTERO  shift, and go to state 4
    '-'     shift, and go to state 45

    exp_entera  go to state 66


State 50

   15 exp_var_assign: FLT VAR EQ . exp_var ';'

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 67
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 51

   14 exp_var_assign: FLT VAR ';' .

    $default  reduce using rule 14 (exp_var_assign)


State 52

   16 exp_var_assign: FLT VAR '[' . exp_entera ']' ';'

    ENTERO  shift, and go to state 4
    '-'     shift, and go to state 45

    exp_entera  go to state 68


State 53

   18 exp_var_assign: STR VAR EQ . exp_var ';'

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 69
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 54

   17 exp_var_assign: STR VAR ';' .

    $default  reduce using rule 17 (exp_var_assign)


State 55

   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var
   30        | POW '(' exp_var . ',' exp_var ')'

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ','  shift, and go to state 70


State 56

    6 line: QUIT ';' '\n' .

    $default  reduce using rule 6 (line)


State 57

   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var
   36 exp_cadena: IF '(' exp_var . COMPARE exp_var ')'

    COMPARE  shift, and go to state 71
    '+'      shift, and go to state 40
    '-'      shift, and go to state 41
    '*'      shift, and go to state 42
    '/'      shift, and go to state 43


State 58

   22 exp_var: '(' exp_var ')' .

    $default  reduce using rule 22 (exp_var)


State 59

   19 exp_var_assign: nom_var EQ exp_var . ';'
   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ';'  shift, and go to state 72


State 60

   26 exp_var: exp_var . '+' exp_var
   26        | exp_var '+' exp_var .
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var

    '*'  shift, and go to state 42
    '/'  shift, and go to state 43

    $default  reduce using rule 26 (exp_var)


State 61

   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   27        | exp_var '-' exp_var .
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var

    '*'  shift, and go to state 42
    '/'  shift, and go to state 43

    $default  reduce using rule 27 (exp_var)


State 62

   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   28        | exp_var '*' exp_var .
   29        | exp_var . '/' exp_var

    $default  reduce using rule 28 (exp_var)


State 63

   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var
   29        | exp_var '/' exp_var .

    $default  reduce using rule 29 (exp_var)


State 64

    8 nom_var: VAR '[' exp_entera ']' .

    $default  reduce using rule 8 (nom_var)


State 65

   12 exp_var_assign: INT VAR EQ exp_var . ';'
   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ';'  shift, and go to state 73


State 66

   13 exp_var_assign: INT VAR '[' exp_entera . ']' ';'

    ']'  shift, and go to state 74


State 67

   15 exp_var_assign: FLT VAR EQ exp_var . ';'
   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ';'  shift, and go to state 75


State 68

   16 exp_var_assign: FLT VAR '[' exp_entera . ']' ';'

    ']'  shift, and go to state 76


State 69

   18 exp_var_assign: STR VAR EQ exp_var . ';'
   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ';'  shift, and go to state 77


State 70

   30 exp_var: POW '(' exp_var ',' . exp_var ')'

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 78
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 71

   36 exp_cadena: IF '(' exp_var COMPARE . exp_var ')'

    ENTERO      shift, and go to state 4
    DECIMAL     shift, and go to state 5
    CADENA      shift, and go to state 6
    VAR         shift, and go to state 7
    EXPRESSION  shift, and go to state 11
    POW         shift, and go to state 13
    IF          shift, and go to state 15
    '-'         shift, and go to state 16
    '('         shift, and go to state 18

    nom_var      go to state 36
    exp_var      go to state 79
    exp_entera   go to state 23
    exp_decimal  go to state 24
    exp_cadena   go to state 25


State 72

   19 exp_var_assign: nom_var EQ exp_var ';' .

    $default  reduce using rule 19 (exp_var_assign)


State 73

   12 exp_var_assign: INT VAR EQ exp_var ';' .

    $default  reduce using rule 12 (exp_var_assign)


State 74

   13 exp_var_assign: INT VAR '[' exp_entera ']' . ';'

    ';'  shift, and go to state 80


State 75

   15 exp_var_assign: FLT VAR EQ exp_var ';' .

    $default  reduce using rule 15 (exp_var_assign)


State 76

   16 exp_var_assign: FLT VAR '[' exp_entera ']' . ';'

    ';'  shift, and go to state 81


State 77

   18 exp_var_assign: STR VAR EQ exp_var ';' .

    $default  reduce using rule 18 (exp_var_assign)


State 78

   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var
   30        | POW '(' exp_var ',' exp_var . ')'

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ')'  shift, and go to state 82


State 79

   26 exp_var: exp_var . '+' exp_var
   27        | exp_var . '-' exp_var
   28        | exp_var . '*' exp_var
   29        | exp_var . '/' exp_var
   36 exp_cadena: IF '(' exp_var COMPARE exp_var . ')'

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ')'  shift, and go to state 83


State 80

   13 exp_var_assign: INT VAR '[' exp_entera ']' ';' .

    $default  reduce using rule 13 (exp_var_assign)


State 81

   16 exp_var_assign: FLT VAR '[' exp_entera ']' ';' .

    $default  reduce using rule 16 (exp_var_assign)


State 82

   30 exp_var: POW '(' exp_var ',' exp_var ')' .

    $default  reduce using rule 30 (exp_var)


State 83

   36 exp_cadena: IF '(' exp_var COMPARE exp_var ')' .

    $default  reduce using rule 36 (exp_cadena)
